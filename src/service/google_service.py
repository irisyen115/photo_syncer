from service.synology_service import (
    save_exist_db_with_person,save_photos_to_db_with_person,
    random_pick_from_person_database, list_all_photos_by_person
)
from lib.synlogy import list_photos_by_album, list_photos_by_person
from lib.google import get_service
from datetime import datetime, timedelta
import logging
from models.photo import Photo
from models.database import SessionLocal
from models.person import Person
import requests
from config.config import Config
import threading
import time

logging.basicConfig(filename="error.log", level=logging.ERROR, format="%(asctime)s - %(levelname)s - %(message)s")

def needs_sync_warning(person_photos, person_id, upload_photo_num):
    if not person_id:
        return {"photos": [], "messages": ["person_id ÁÇ∫Á©∫ÔºåÁÑ°Ê≥ïËôïÁêÜ"]}

    messages = []
    sync_warn = False

    if not person_photos and len(person_photos) <= upload_photo_num:
        msg = f"‚ö†Ô∏è Êâæ‰∏çÂà∞ person_id={person_id} ÁöÑÁÖßÁâáÔºåÂ∞áËä±ÊôÇÈñìÂæûÂÖ®ÈÉ®Ë≥áÊñô‰∏≠ÊåëÈÅ∏„ÄÇ"
        sync_warn = True
        messages.append(msg)
    if not messages:
        messages.append(f"‚úÖ person_id={person_id} ÁöÑÁÖßÁâáÂ∑≤Á∂ì‰∏äÂÇ≥ÂÆåÊàêÔºåÊï∏ÈáèÁÇ∫ {upload_photo_num} Âºµ„ÄÇ")
    return sync_warn, messages

def background_sync_and_upload(auth, person_id, upload_photo_num, token):
    logging.info(f"ÈñãÂßãËÉåÊôØÂêåÊ≠•Ëàá‰∏äÂÇ≥ person_id={person_id}")

    person_photo_list = list_all_photos_by_person(auth=auth, person_id=person_id)
    if not person_photo_list:
        logging.error(f"‚ö†Ô∏è ‰∫∫Âì° {person_id} Ê≤íÊúâÂêåÊ≠•Âà∞‰ªª‰ΩïÁÖßÁâá")
        return

    save_photos_to_db_with_person(person_photo_list, person_id)
    random_photos = random_pick_from_person_database(person_id=person_id, limit=upload_photo_num)
    if not random_photos:
        logging.error(f"‚ö†Ô∏è ‰∫∫Âì° {person_id} ÁöÑÈö®Ê©üÁÖßÁâáÈÅ∏ÂèñÁÇ∫Á©∫")
        return

    requests.post(f"{Config.SERVER_URL}/api/line/notify", json={
        "token": token,
        "message": "‚úÖ ‰Ω†ÁöÑ‰∫∫Âì°Ë≥áÊñôÂ∑≤ÂÆåÊàêÂêåÊ≠•ÔºÅË´ãÈáçÊñ∞Êìç‰Ωú„ÄÇ"
    })

def get_photos_upload_to_album(auth, person_id, album_id, upload_photo_num, token):
    if not person_id:
        logging.error("‚ö†Ô∏è person_id ÁÇ∫Á©∫ÔºåÁÑ°Ê≥ïËôïÁêÜ")
        return {"photos": [], "messages": ["person_id ÁÇ∫Á©∫ÔºåÁÑ°Ê≥ïËôïÁêÜ"]}

    db = SessionLocal()
    person_photos = db.query(Photo).join(Person, Person.photo_id == Photo.item_id).filter(Person.person_id == person_id).all()
    if not person_photos:
        logging.error(f"‚ö†Ô∏è Êâæ‰∏çÂà∞ person_id={person_id} ÁöÑÁÖßÁâáÔºåÂ∞áËä±ÊôÇÈñìÂæûÂÖ®ÈÉ®Ë≥áÊñô‰∏≠ÊåëÈÅ∏„ÄÇ")

    sync_warn, messages = needs_sync_warning(
        person_photos,
        person_id,
        upload_photo_num
    )

    if sync_warn:
        logging.warning(f"‚ö†Ô∏è ‰∫∫Âì° {person_id} ÈúÄË¶ÅÂêåÊ≠•ÔºåÂ∞áÊñºËÉåÊôØÂª∂ÈÅ≤Âü∑Ë°å")

        threading.Timer(
            interval=2,
            function=background_sync_and_upload,
            args=(auth, person_id, upload_photo_num, token)
        ).start()

        return {
            "photos": [],
            "messages": ["‚úÖ ‰ªªÂãôÂ∑≤Êèê‰∫§ÔºåÁ≥ªÁµ±Â∞áÂú®ËÉåÊôØÂêåÊ≠•Ë≥áÊñôËàá‰∏äÂÇ≥ÁÖßÁâáÔºåË´ãÁ®çÂÄôÂÜçË©¶"]
        }

    person_photo_list = list_photos_by_person(auth=auth, person_id=person_id, limit=upload_photo_num)
    random_photos = random_pick_from_person_database(person_id=person_id, limit=upload_photo_num)

    if not person_photo_list or not random_photos:
        return {"photos": [], "messages": ["Ê≤íÊúâÂèØ‰∏äÂÇ≥ÁöÑÁÖßÁâá"]}

    save_photos_to_db_with_person(person_photo_list, person_id)
    exit_person_filename = [photo.filename for photo in save_exist_db_with_person(person_id=person_id, photos=random_photos)]

    return {
        "photos": random_photos,
        "messages": messages
    }

def delete_photos_by_filename(creds, album_id, filenames):
    service = get_service(creds)
    photos = []
    next_page_token = None

    while True:
        response = service.mediaItems().search(body={
            "albumId": album_id,
            "pageSize": 100,
            "pageToken": next_page_token
        }).execute()

        items = response.get("mediaItems", [])
        for item in items:
            filename = item.get("filename")
            media_id = item.get("id")
            if filename in filenames:
                photos.append(media_id)

        next_page_token = response.get("nextPageToken")
        if not next_page_token:
            break

    logging.error(f"üóëÔ∏è Á¨¶ÂêàÊ¢ù‰ª∂Ë¶ÅÂà™Èô§ÁöÑÁÖßÁâáIDÊï∏ÈáèÔºö{len(photos)}")

    for photo_id in photos:
        try:
            service.mediaItems().delete(mediaItemId=photo_id).execute()
            logging.error(f"‚úÖ Â∑≤Âà™Èô§Ôºö{photo_id}")
        except Exception as e:
            logging.error(f"‚ùå Âà™Èô§Â§±ÊïóÔºö{photo_id} - {e}")
